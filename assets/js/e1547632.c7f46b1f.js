"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[113],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var d=r.createContext({}),s=function(e){var n=r.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(d.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(t),m=a,f=c["".concat(d,".").concat(m)]||c[m]||p[m]||o;return t?r.createElement(f,i(i({ref:n},u),{},{components:t})):r.createElement(f,i({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=c;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},3017:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return d},metadata:function(){return s},toc:function(){return u},default:function(){return c}});var r=t(3117),a=t(102),o=(t(7294),t(3905)),i=["components"],l={title:"Creating Banner Ad",sidebar_position:1},d=void 0,s={unversionedId:"usage/banner",id:"usage/banner",isDocsHomePage:!1,title:"Creating Banner Ad",description:"Banner Ad is a rectangular ads that occupy a portion of an app's layout.",source:"@site/docs/usage/banner.mdx",sourceDirName:"usage",slug:"/usage/banner",permalink:"/admob/docs/usage/banner",editUrl:"https://github.com/react-native-admob/admob/edit/master/docs/docs/usage/banner.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Creating Banner Ad",sidebar_position:1},sidebar:"docsSidebar",previous:{title:"Example App",permalink:"/admob/docs/Example App"},next:{title:"Full Screen Ad Fundamentals",permalink:"/admob/docs/usage/fullscreen-fundamentals"}},u=[{value:"Fundamentals",id:"fundamentals",children:[],level:2},{value:"Reloading ad",id:"reloading-ad",children:[],level:2},{value:"Handling events",id:"handling-events",children:[],level:2}],p={toc:u};function c(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://support.google.com/admob/answer/9993556"},"Banner Ad")," is a rectangular ads that occupy a portion of an app's layout."),(0,o.kt)("details",{markdown:"1"},(0,o.kt)("summary",null,"View example of banner ads"),(0,o.kt)("img",{src:"https://storage.googleapis.com/support-kms-prod/2XpIo0DsKZTFDE1Akcox5C8ixzFCySgs8FTo",alt:"banner ad example image"})),(0,o.kt)("h2",{id:"fundamentals"},"Fundamentals"),(0,o.kt)("p",null,"You can create Banner Ad by adding ",(0,o.kt)("inlineCode",{parentName:"p"},"BannerAd")," component."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { BannerAd, TestIds } from '@react-native-admob/admob';\n\nexport default function App() {\n  const bannerRef = useRef(null);\n  return (\n    <View>\n      <BannerAd size={BannerAdSize.BANNER} unitId={TestIds.BANNER} />\n    </View>\n  );\n}\n")),(0,o.kt)("p",null,"Following two props are required:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"unitId")," is the ad unit ID created in the AdMob console. You can set this to ",(0,o.kt)("inlineCode",{parentName:"li"},"TestIds.BANNER")," for testing."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"size")," is size of the ad. It can be predefined value one of the ",(0,o.kt)("inlineCode",{parentName:"li"},"BannerAdSize"),", or custom dimensions string, e.g. ",(0,o.kt)("inlineCode",{parentName:"li"},'"300x200"'),".")),(0,o.kt)("h2",{id:"reloading-ad"},"Reloading ad"),(0,o.kt)("p",null,"Ad is loaded automatically when component is mounted, but you can reload it by calling ",(0,o.kt)("inlineCode",{parentName:"p"},"loadAd")," method from its ",(0,o.kt)("inlineCode",{parentName:"p"},"ref")," object."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"{4,10,12}","{4,10,12}":!0},"import { BannerAd, TestIds } from '@react-native-admob/admob';\n\nexport default function App() {\n  const bannerRef = useRef(null);\n  return (\n    <View>\n      <BannerAd\n        size={BannerAdSize.BANNER}\n        unitId={TestIds.BANNER}\n        ref={bannerRef}\n      />\n      <Button title=\"Reload\" onPress={() => bannerRef.current?.loadAd()} />\n    </View>\n  );\n}\n")),(0,o.kt)("h2",{id:"handling-events"},"Handling events"),(0,o.kt)("p",null,"You can handle events by adding props to the component."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"{10}","{10}":!0},"import { BannerAd, TestIds } from '@react-native-admob/admob';\n\nexport default function App() {\n  const bannerRef = useRef(null);\n  return (\n    <View>\n      <BannerAd\n        size={BannerAdSize.BANNER}\n        unitId={TestIds.BANNER}\n        onAdFailedToLoad={(error) => console.error(error)}\n        ref={bannerRef}\n      />\n      <Button title=\"Reload\" onPress={() => bannerRef.current?.loadAd()} />\n    </View>\n  );\n}\n")),(0,o.kt)("p",null,"See suppported events in ",(0,o.kt)("a",{parentName:"p",href:"/docs/api/components/BannerAd#props"},"BannerAd API Reference"),"."))}c.isMDXComponent=!0}}]);